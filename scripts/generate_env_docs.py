#!/usr/bin/env python3
"""Generate docs/env-vars.md from .env.example."""
from __future__ import annotations

from pathlib import Path
from textwrap import dedent

REPO_ROOT = Path(__file__).resolve().parents[1]
ENV_TEMPLATE = REPO_ROOT / ".env.example"
DOC_PATH = REPO_ROOT / "docs" / "env-vars.md"


def parse_env_template(path: Path) -> list[tuple[str, str, str]]:
    rows: list[tuple[str, str, str]] = []
    comment_buffer: list[str] = []

    for raw_line in path.read_text().splitlines():
        stripped = raw_line.strip()

        if not stripped:
            comment_buffer = []
            continue

        if stripped.startswith("#"):
            content = stripped[1:].strip()

            if not content:
                continue

            # Commented-out environment variables still count toward the docs.
            if "=" in content and not content.startswith("#"):
                key, value = content.split("=", 1)
                description = " ".join(comment_buffer).strip()
                rows.append((key.strip(), value.strip(), description))
                continue

            comment_buffer.append(content)
            continue

        if "=" in raw_line:
            key, value = raw_line.split("=", 1)
            description = " ".join(comment_buffer).strip()
            rows.append((key.strip(), value.strip(), description))
            continue

    return rows


def format_default(value: str) -> str:
    return value if value else "—"


def build_markdown(rows: list[tuple[str, str, str]]) -> str:
    header = dedent(
        """\
        <!-- This file is generated by scripts/generate_env_docs.py. Do not edit manually. -->

        # Environment variables

        | Variable | Default | Description |
        | --- | --- | --- |
        """
    ).strip()

    body_lines = [
        f"| `{key}` | {format_default(value)} | {description or '—'} |"
        for key, value, description in rows
    ]

    return "\n".join([header, *body_lines, ""]) + "\n"


def main() -> None:
    rows = parse_env_template(ENV_TEMPLATE)

    if not rows:
        raise SystemExit("No environment variables found in .env.example")

    DOC_PATH.parent.mkdir(parents=True, exist_ok=True)
    markdown = build_markdown(rows)
    DOC_PATH.write_text(markdown)


if __name__ == "__main__":
    main()
